memory_limit = 250M
; Nginx has a time restriction as well (proxy_read_timeout)
max_execution_time = 10

; No need to enable as this value is already enabled by the extension
; opcache.enable = 1
; 0 means it will check on every request
; 0 is irrelevant if opcache.validate_timestamps=0 which is desirable in production
opcache.revalidate_freq = 0
; This will revalidate the script. If you set this to 0(best performance), you need to manually clear the OPcache
; every time your PHP code changes (we will handle this in the next section). If you donâ€™t want to clear it yourself,
; you can set this to 1 and configure the revalidate interval with opcache.revalidate_freq, this will cost you some
; performance as it needs to check for changes every x seconds.
opcache.validate_timestamps = 0
opcache.max_accelerated_files = 32531
; How many Megabyte you want to assign to OPcache. Choose anything higher than 64 (default value) depending on your needs.
opcache.memory_consumption = 128
; How many Megabyte you want to assign to interned strings. Choose anything higher than 16 (default value).
opcache.interned_strings_buffer = 64

apc.enabled = On
apc.enable_cli = On
apc.shm_segments = 1
apc.shm_size = 1536M
apc.gc_ttl = 300
apc.ttl = 15
apc.entries_hint = 65535
; Don't use the request time, but the actual time when calculating the expiration time of cache items
; Otherwise a short-lived cache variable set at the end of a slow request could end up having a negative TTL in reality
apc.use_request_time = 0
; igbinary is not used by default, but explicitly called from the Cache trait, since the apcu version
; available through pecl isn't compiled with support for igbinary.
;apc.serializer=igbinary

session.serialize_handler = igbinary

; Compress reused strings when compressing data using igbinary
igbinary.compact_strings = On

; Reset error log to SAPI
error_log =
